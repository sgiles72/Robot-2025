#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHSD.h>
#include <FEHMotor.h>

AnalogInputPin right_opto(FEHIO::P2_0);
AnalogInputPin middle_opto(FEHIO::P2_4);
AnalogInputPin left_opto(FEHIO::P2_0);

FEHMotor right_motor(FEHMotor::Motor3, 9);
FEHMotor left_motor(FEHMotor::Motor0, 9);

DigitalEncoder right_encoder(FEHIO::P2_6);
DigitalEncoder left_encoder(FEHIO::P2_7);

int FORWARD_SPEED = 30;
int TURN_SPEED = 15;
int REVERSE_SPEED = 10;
int TURN_DELAY = 1250;
int REVERSE_SHORT_DISTANCE_DELAY = 500;

float RIGHT_SENSOR_STRAIGHT_BOUNDS = 2.940;
float MIDDLE_SENSOR_STRAIGHT_BOUNDS = 3.000;
float LEFT_SENSOR_STRAIGHT_BOUNDS = 2.500;

void stop()
{
    right_motor.Stop();
    left_motor.Stop();
}

void reverse_short_distance()
{
    right_motor.SetPercent(-REVERSE_SPEED);
    left_motor.SetPercent(-REVERSE_SPEED);

    Sleep(REVERSE_SHORT_DISTANCE_DELAY);
}

void turn_left()
{
    right_motor.SetPercent(TURN_SPEED);
    left_motor.SetPercent(-TURN_SPEED * 2);

    Sleep(TURN_DELAY);

    stop();
}

void turn_right()
{
    right_motor.SetPercent(-TURN_SPEED * 2);
    left_motor.SetPercent(TURN_SPEED);

    Sleep(TURN_DELAY);

    stop();
}

void move_left()
{
    right_motor.SetPercent(FORWARD_SPEED * 0.8);
    left_motor.SetPercent(FORWARD_SPEED * 0.2);
}

void move_right()
{
    left_motor.SetPercent(FORWARD_SPEED * 0.8);
    right_motor.SetPercent(FORWARD_SPEED * 0.2);
}

void move_forward()
{
    right_motor.SetPercent(FORWARD_SPEED);
    left_motor.SetPercent(FORWARD_SPEED);
}

bool right_sensor_on_line_straight()
{
    return right_opto.Value() > RIGHT_SENSOR_STRAIGHT_BOUNDS;
}

bool left_sensor_on_line_straight()
{
    return left_opto.Value() > LEFT_SENSOR_STRAIGHT_BOUNDS;
}

bool middle_sensor_on_line_straight()
{
    return middle_opto.Value() > MIDDLE_SENSOR_STRAIGHT_BOUNDS;
}

int main()// line_following_robot()
{
    enum LineStates
    {
        MIDDLE,
        RIGHT,
        LEFT
    };

    int state = MIDDLE; // Set the initial state
    while (true)
    { // I will follow this line forever!
        switch (state)
        {
            // If I am in the middle of the line...
            case MIDDLE:
            {
                LCD.Write("On middle. Sensor Value: ");
                LCD.WriteLine(middle_opto.Value());
                move_forward();
                /* Drive */
                if (right_sensor_on_line_straight())
                {
                    state = RIGHT; // update a new state
                }
                else if (left_sensor_on_line_straight())
                {
                    state = LEFT; // update a new state
                }
                /* Code for if left sensor is on the line */
                break;
            }
               
            // If the right sensor is on the line...
            case RIGHT:
            {
                LCD.Write("On right. Sensor Value: ");
                LCD.WriteLine(right_opto.Value());
                move_right();
                // Set motor powers for right turn
                /* Drive */
                if (middle_sensor_on_line_straight())
                {
                    state = MIDDLE; // update a new state
                }
                else if (left_sensor_on_line_straight())
                {
                    state = LEFT; // update a new state
                }

                break;
            }
               
            // If the left sensor is on the line...
            case LEFT:
            {
                LCD.Write("On left. Sensor Value: ");
                LCD.WriteLine(left_opto.Value());

                move_left();

                if (middle_sensor_on_line_straight())
                {
                    state = MIDDLE; // update a new state
                }
                else if (right_sensor_on_line_straight())
                {
                    state = RIGHT; // update a new state
                }

                break;
            }

            default: // Error. Something is very wrong.
            {
                LCD.WriteLine("Something went wrong!");
                state = MIDDLE;
                break;
            }
        }
    }
}

